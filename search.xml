<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>动态表格组件,自定义列</title>
    <url>/2024/03/31/two/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--  <span class="attr">https</span>:<span class="comment">//blog.csdn.net/m0_58953167/article/details/134895241--&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">&quot;visible&quot;</span>   @<span class="attr">close</span>=<span class="string">&quot;tableData=[]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;margin: 0 auto;&quot;</span> <span class="attr">max-height</span>=<span class="string">&quot;250px&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; scope.$index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">v-for</span>=<span class="string">&quot;(column, index) in dynamicColumns&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:prop</span>=<span class="string">&quot;column.prop&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;column.label&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;auto&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--            &lt;el-input v-model=&quot;scope.row[column.prop]&quot; size=&quot;small&quot;&gt;&lt;/el-input&gt;--&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-form-item</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">el-input</span>  <span class="attr">:rules</span>=<span class="string">&quot;[&#123; required: true, message: &#x27;输入不能为空&#x27;, trigger: &#x27;blur&#x27; &#125;]&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;scope.row[column.prop]&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">fixed</span>=<span class="string">&quot;right&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;deleteTableData(scope.row)&quot;</span> <span class="attr">link</span> <span class="attr">icon</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 10px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitRelateData&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;text-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addTableData&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup &gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line">import baseService from &quot;@/service/baseService&quot;;</span><br><span class="line">import &#123;ElMessage&#125; from &quot;element-plus&quot;;</span><br><span class="line">const tableData = ref([]);</span><br><span class="line">const visible = ref(false);</span><br><span class="line">const dynamicColumns = ref([]);</span><br><span class="line">const rowData = ref(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//动态加载后端对应后续动态字段</span><br><span class="line">const getTeachClass = async (row)=&gt;&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const  res = await baseService.post(&quot;/obe/examine/getDynammicField/&quot;,row);</span><br><span class="line">      if(res.code!==0) &#123;</span><br><span class="line">          ElMessage.error(&quot;数据初始化失败!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    return res.data;</span><br><span class="line">  &#125;catch&#123;</span><br><span class="line">    ElMessage.error(&quot;获取动态字段列表失败!&quot;);</span><br><span class="line">    return [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//后端初始化列数据</span><br><span class="line">const init =  async (row) =&gt; &#123;</span><br><span class="line">    //回显动态字段</span><br><span class="line">  const columnsFromBackend = [</span><br><span class="line">    //此为固定字段，后端有用到，前后端要统一</span><br><span class="line">    &#123;&quot;prop&quot;:&quot;作业&quot;,&quot;label&quot;:&quot;作业&quot;&#125;,</span><br><span class="line">  ];</span><br><span class="line">  //动态字段加载</span><br><span class="line">  const data = await getTeachClass(row);</span><br><span class="line">  data.forEach((item)=&gt;&#123;</span><br><span class="line">    const newRow = &#123;&#125;;</span><br><span class="line">    newRow[&quot;prop&quot;] = item;</span><br><span class="line">    newRow[&quot;label&quot;] = item;</span><br><span class="line">    columnsFromBackend.push(newRow)</span><br><span class="line">  &#125;)</span><br><span class="line">   //根据后端信息构造动态字段数据 例如:&#123;&quot;prop&quot;:&quot;作业&quot;,&quot;label&quot;:&quot;作业&quot;&#125;,</span><br><span class="line">  dynamicColumns.value = columnsFromBackend;</span><br><span class="line">  </span><br><span class="line">  //后端初始化表格数据</span><br><span class="line">  let rows = await tableDataInit(row)</span><br><span class="line">  for (let i=0;i&lt;rows.length;i++) &#123;</span><br><span class="line">      let newRow=&#123;&#125;</span><br><span class="line">      dynamicColumns.value.forEach((column) =&gt; &#123;</span><br><span class="line">          // 后端获取的某列如果不存在则该列的值为0，可以查看对应sql查出来的数据</span><br><span class="line">          let value = rows[i][column.prop]==null?</span><br><span class="line">              0:(Number.isNaN(Number(rows[i][column.prop]))?</span><br><span class="line">                  rows[i][column.prop]:Number(rows[i][column.prop]));</span><br><span class="line">          newRow[column.prop] = value;</span><br><span class="line">      &#125;);</span><br><span class="line">      tableData.value.push(newRow);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//回显表格数据</span><br><span class="line">const tableDataInit = async (row)=&gt;&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const  res = await baseService.post(&quot;/obe/examine/getObjectRelations/&quot;,row);</span><br><span class="line">      if(res.code!==0) &#123;</span><br><span class="line">          ElMessage.error(&quot;数据初始化失败!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    return res.data;</span><br><span class="line">  &#125;catch&#123;</span><br><span class="line">    ElMessage.error(&quot;数据初始化失败!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//提交关联信息列表数据</span><br><span class="line">const submitRelateData = async ()=&gt;&#123;</span><br><span class="line">  // console.log(&quot;表格关联数据:&quot;+tableData.value);</span><br><span class="line">  // console.log(&quot;行数据:&quot;+rowData.value);</span><br><span class="line">  const submitData= &#123;&quot;tableData&quot;:tableData.value,&quot;examineEntity&quot;:rowData.value&#125;;</span><br><span class="line">    let hasInvalidData = false; // 设置标志位，表示是否存在无效数据</span><br><span class="line">  for (let  i=0;i&lt;tableData.value.length;i++) &#123;</span><br><span class="line">      dynamicColumns.value.forEach((item)=&gt;&#123;</span><br><span class="line">        //当前只有非空校验</span><br><span class="line">          if (tableData.value[i][item.prop]===&quot;&quot;||tableData.value[i][item.prop]===undefined) &#123;</span><br><span class="line">              ElMessage.error(&quot;数据不合法,请重新输入!&quot;);</span><br><span class="line">              hasInvalidData = true; // 如果发现无效数据，将标志位设为 true</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      if (hasInvalidData) &#123;</span><br><span class="line">          break; // 如果存在无效数据，跳出外部循环</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    if (hasInvalidData) &#123;</span><br><span class="line">        return; // 如果存在无效数据，直接return函数</span><br><span class="line">    &#125;</span><br><span class="line">//更新提交表格</span><br><span class="line">  try &#123;</span><br><span class="line">        const  res = await baseService.post(&quot;/obe/examine/updateTableData/&quot;,submitData);</span><br><span class="line">         if(res.code!==0) &#123;</span><br><span class="line">             ElMessage.error(&quot;数据更新失败!&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;catch&#123;</span><br><span class="line">        ElMessage.error(&quot;服务器异常!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  tableData.value=[];</span><br><span class="line">  visible.value=false;</span><br><span class="line">&#125;</span><br><span class="line">// 新增一行</span><br><span class="line">const addTableData = ()=&gt;&#123;</span><br><span class="line">  const newRow = &#123;&#125;;</span><br><span class="line">  dynamicColumns.value.forEach((column) =&gt; &#123;</span><br><span class="line">    newRow[column.prop] = null;</span><br><span class="line">  &#125;);</span><br><span class="line">  tableData.value.push(newRow);</span><br><span class="line">&#125;</span><br><span class="line">// 删除</span><br><span class="line">const deleteTableData = (row) =&gt;&#123;</span><br><span class="line">  const index = tableData.value.indexOf(row);</span><br><span class="line">  if (index !== -1) &#123;</span><br><span class="line">    tableData.value.splice(index, 1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//获取每条考核信息记录,回显数据初始化函数入口</span><br><span class="line">const setrowData = (row)=&gt;&#123;</span><br><span class="line">  init(row);</span><br><span class="line">  visible.value = true;</span><br><span class="line">  rowData.value = row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  setrowData</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  .icon&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom:10px;</span><br><span class="line">    right: 19px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.text-right &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>
<p><img src="/images/img.png" alt="/images/img.png"></p>
<p><img src="/images/img_1.png" alt="/images/img_1.png"></p>
<p><img src="/images/img_2.png" alt="/images/img_2.png"></p>
<p><img src="/images/img_3.png" alt="/images/img_3.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>在线匹配聊天简介</title>
    <url>/2024/04/13/%E5%9C%A8%E7%BA%BF%E5%8C%B9%E9%85%8D%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><h1 id="在线匹配聊天系统"><a href="#在线匹配聊天系统" class="headerlink" title="在线匹配聊天系统"></a>在线匹配聊天系统</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>用户可以手机登录到本系统，邀请其他人注册到本系统共同加入到同一个队伍聊天，本系统还根据用户标签，爱好，描述给用户自动推荐相似用户，本用户可以，创建队伍（加密队伍，公开队伍，私有队伍），删除自己队伍，退出自己队伍（队长自动顺延），解散自己队伍，加入或退出别人队伍，用户信息编辑修改，用户根据标签搜索用户，用户根据标签搜索队伍信息，给用户推荐相似用户，给用户推荐相似队伍，实现已经加入的队伍的在线聊天功能。</p>
<h2 id="项目图片"><a href="#项目图片" class="headerlink" title="项目图片"></a>项目图片</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_4.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_5.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_6.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_7.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_8.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_9.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_10.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_11.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_12.png"
                      alt="请添加图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_13.png"
                      alt="请添加图片描述"
                ></p>
<h2 id="项目所用到的技术"><a href="#项目所用到的技术" class="headerlink" title="项目所用到的技术"></a>项目所用到的技术</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>1.Java编程语言+ SpringBoot框架<br>2.SpringMVC + Mybatis + Mybatis Plus + mybatis 自定义插件打印sql<br>3.MySQL 数据库<br>4.Redis缓存,Redis分布式锁,ReentrantLock<br>5.Swagger + Knife4j接口文档<br>6.springboot 注解开发websocket<br>7.余弦相似度算法，springboot定时任务</p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>1.vue3，vant移动组件,vue-router,vite构建工具,<br>2.pinia,axios自定义,路由导航守卫，pinia 持久化插件</p>
]]></content>
      <categories>
        <category>在线匹配聊天项目</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis分布式锁</title>
    <url>/2024/04/13/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h1 id="分布式锁执行流程"><a href="#分布式锁执行流程" class="headerlink" title="分布式锁执行流程"></a>分布式锁执行流程</h1><h2 id="实现分布式锁时需要实现的两个基本方法："><a href="#实现分布式锁时需要实现的两个基本方法：" class="headerlink" title="实现分布式锁时需要实现的两个基本方法："></a>实现分布式锁时需要实现的两个基本方法：</h2><p>获取锁：</p>
<p>互斥：确保只能有一个线程获取锁<br>非阻塞：尝试一次，成功返回true，失败返回false</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"># 添加锁，<span class="variable constant_">NX</span>是（<span class="keyword">if</span> not exist）只有该键不存在才set成功否则set失败，<span class="variable constant_">EX</span>是设置超时时间</span><br><span class="line"><span class="variable constant_">SET</span> lock thread <span class="variable constant_">NX</span> <span class="variable constant_">EX</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></div>
<p>释放锁：</p>
<p>手动释放<br>超时释放：获取锁时添加一个超时时间</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"># 释放锁，删除即可</span><br><span class="line"><span class="variable constant_">DEL</span> key</span><br></pre></td></tr></table></figure></div>
<h2 id="分布式锁初级版本"><a href="#分布式锁初级版本" class="headerlink" title="分布式锁初级版本"></a>分布式锁初级版本</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">public interface <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非阻塞方式，尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间，过期后自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true代表获取锁成功; false代表获取锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    boolean <span class="title function_">tryLock</span>(long timeoutSec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> implements <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 业务名称</span></span><br><span class="line">    private <span class="title class_">String</span> name;</span><br><span class="line">    private <span class="title class_">StringRedisTemplate</span> stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过构造方法将name和stringRedisTemplate传入</span></span><br><span class="line">    public <span class="title class_">SimpleRedisLock</span>(<span class="title class_">String</span> name, <span class="title class_">StringRedisTemplate</span> stringRedisTemplate) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stringRedisTemplate</span> = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">KEY_PREFIX</span> = <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public boolean <span class="title function_">tryLock</span>(<span class="params">long timeoutSec</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取线程标识</span></span><br><span class="line">        long threadId = <span class="title class_">Thread</span>.<span class="title function_">currentThread</span>().<span class="title function_">getId</span>();</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="title class_">Boolean</span> success = stringRedisTemplate.<span class="title function_">opsForValue</span>()</span><br><span class="line">                .<span class="title function_">setIfAbsent</span>(<span class="variable constant_">KEY_PREFIX</span> + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, <span class="title class_">TimeUnit</span>.<span class="property">SECONDS</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Boolean</span>.<span class="property">TRUE</span>.<span class="title function_">equals</span>(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">unlock</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//通过del删除锁</span></span><br><span class="line">        stringRedisTemplate.<span class="title function_">delete</span>(<span class="variable constant_">KEY_PREFIX</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Redis分布式锁误删问题"><a href="#Redis分布式锁误删问题" class="headerlink" title="Redis分布式锁误删问题"></a>Redis分布式锁误删问题</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_14.png"
                      alt="1. List item"
                ></p>
<h3 id="误删第一种情况如图上"><a href="#误删第一种情况如图上" class="headerlink" title="误删第一种情况如图上"></a>误删第一种情况如图上</h3><ol>
<li>线程1获得了锁但是业务发生了阻塞，一直阻塞到该锁自动释放</li>
<li>释放后线程2获得了锁开始执行业务，此时线程1不再阻塞业务开始执行</li>
<li>线程1业务先于线程2完成并释放锁，此时线程1释放的是线程2的锁，</li>
<li>线程2的锁被线程1释放后线程3再次获得锁执行业务引发类似的线程不安全问题</li>
</ol>
<h3 id="解决第一种误删问题"><a href="#解决第一种误删问题" class="headerlink" title="解决第一种误删问题"></a>解决第一种误删问题</h3><p>在获得锁的时候存入线程标识可以用（UUID）表示</p>
<p>在释放锁时先获取锁中的线程标识，判断是否与当前线程标识一致</p>
<ul>
<li>如果一致则释放锁</li>
<li>如果不一致则不释放锁</li>
<li>注意：不要直接将线程id作为线程标识，因为不同JVM中的线程id可能一样，所以可以用 线程id+UUID 作为线程标识</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> implements <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务名称</span></span><br><span class="line">    private <span class="title class_">String</span> name;</span><br><span class="line">    private <span class="title class_">StringRedisTemplate</span> stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造方法将name和stringRedisTemplate传入</span></span><br><span class="line">    public <span class="title class_">SimpleRedisLock</span>(<span class="title class_">String</span> name, <span class="title class_">StringRedisTemplate</span> stringRedisTemplate) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stringRedisTemplate</span> = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">KEY_PREFIX</span> = <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">ID_PREFIX</span> = <span class="variable constant_">UUID</span>.<span class="title function_">randomUUID</span>().<span class="title function_">toString</span>(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public boolean <span class="title function_">tryLock</span>(<span class="params">long timeoutSec</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取线程标识</span></span><br><span class="line">        <span class="title class_">String</span> threadId = <span class="variable constant_">ID_PREFIX</span> + <span class="title class_">Thread</span>.<span class="title function_">currentThread</span>().<span class="title function_">getId</span>();</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="title class_">Boolean</span> success = stringRedisTemplate.<span class="title function_">opsForValue</span>()</span><br><span class="line">                .<span class="title function_">setIfAbsent</span>(<span class="variable constant_">KEY_PREFIX</span> + name, threadId, timeoutSec, <span class="title class_">TimeUnit</span>.<span class="property">SECONDS</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Boolean</span>.<span class="property">TRUE</span>.<span class="title function_">equals</span>(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">unlock</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取线程标识</span></span><br><span class="line">        <span class="title class_">String</span> threadId = <span class="variable constant_">ID_PREFIX</span> + <span class="title class_">Thread</span>.<span class="title function_">currentThread</span>().<span class="title function_">getId</span>();</span><br><span class="line">        <span class="comment">// 获取锁中的标识</span></span><br><span class="line">        <span class="title class_">String</span> id = stringRedisTemplate.<span class="title function_">opsForValue</span>().<span class="title function_">get</span>(<span class="variable constant_">KEY_PREFIX</span> + name);</span><br><span class="line">        <span class="comment">// 判断标识是否一致</span></span><br><span class="line">        <span class="keyword">if</span>(threadId.<span class="title function_">equals</span>(id)) &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            stringRedisTemplate.<span class="title function_">delete</span>(<span class="variable constant_">KEY_PREFIX</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_15.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="误删第二种情况如图上"><a href="#误删第二种情况如图上" class="headerlink" title="误删第二种情况如图上"></a>误删第二种情况如图上</h3><ol>
<li>线程1获得了锁开始执行业务,再执行到unlock方法中的时候，获取了锁标识，并判断了是一致的</li>
<li>即以及进入到if条件判断里面此时由于某种原因发生了阻塞，阻塞到线程1的锁超时释放，线程2获得了锁。</li>
<li>此时在线程2执行业务的时候，线程1不再阻塞即要删除线程1的锁，但此时删除的为线程2的锁这再次造成了线程不安全问题。</li>
</ol>
<h3 id="解决第二种误删问题"><a href="#解决第二种误删问题" class="headerlink" title="解决第二种误删问题"></a>解决第二种误删问题</h3><p>第二种误删问题本质是原子性问题unlock方法不是原子性操作，可通过lua脚本实现<br>此时区分两个概念数据库的原子性操作是<strong>要么都成功要么都失败</strong>，并发编程中指的原子性是，<strong>操作不可拆分、不被中断</strong> 举例来说，当前unlock方法有两redis命令操作，给redis执行的时候是两个任务在任务队列中，中间可能有其他的任务，此时不是原子性的，而经过lua脚本编程实现的这两条命令被封装成了一个任务给redis执行，中间不会插入任何其他的任务，因此解决了此时的误删问题。</p>
<h3 id="并发执行问题"><a href="#并发执行问题" class="headerlink" title="并发执行问题"></a>并发执行问题</h3><p>假设当前线程1执行业务时间过长导致了锁超时自动释放，而线程2此时获得了锁此时造成了并发执行的问题。</p>
<h3 id="并发执行问题解决"><a href="#并发执行问题解决" class="headerlink" title="并发执行问题解决"></a>并发执行问题解决</h3><p>Redission看门狗机制解决</p>
<p>redission中提供的续期机制<br>redisson 中提供的续期机制 开一个监听线程，如果方法还没执行完，就帮你重置 redis 锁的过期时间。 原理：</p>
<ol>
<li>监听当前线程，默认过期时间是 30 秒，每 10 秒续期一次（补到 30 秒）</li>
<li>如果线程挂掉（注意 debug 模式也会被它当成服务器宕机），则不会续期</li>
</ol>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> @<span class="title class_">Resource</span></span><br><span class="line">    private <span class="title class_">RedissonClient</span> redissonClient;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Scheduled</span>(cron = <span class="string">&quot;0 59 23 * * *&quot;</span>)</span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">doCacheRecommendUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">RLock</span> lock = redissonClient.<span class="title function_">getLock</span>(<span class="string">&quot;friend:precachejob:docache:lock&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.<span class="title function_">tryLock</span>(<span class="number">0</span>, 30000L, <span class="title class_">TimeUnit</span>.<span class="property">MILLISECONDS</span>)) &#123;</span><br><span class="line">                   <span class="comment">//实际业务逻辑</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">                        log.<span class="title function_">error</span>(<span class="string">&quot;redis set memory error&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">            log.<span class="title function_">error</span>(<span class="string">&quot;doCacheCommendUser error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.<span class="title function_">isHeldByCurrentThread</span>()) &#123;</span><br><span class="line">                lock.<span class="title function_">unlock</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis分布式登录</title>
    <url>/2024/04/13/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Session-共享"><a href="#Session-共享" class="headerlink" title="Session 共享"></a>Session 共享</h1><p>session的实现基于cookie后端设置session的时候会由cookie返回给前端一个sessionid在cookie里面，之后每次前端请求会带上该sessiond后端以此来获取当前用户的session来判断用户是否登录。</p>
<h2 id="为什么服务器A登录后，请求发到服务器B，不认识该用户？"><a href="#为什么服务器A登录后，请求发到服务器B，不认识该用户？" class="headerlink" title="为什么服务器A登录后，请求发到服务器B，不认识该用户？"></a>为什么服务器A登录后，请求发到服务器B，不认识该用户？</h2><p>用户在A登录，所以session存在了A上，用户的session信息并没有存在B上服务器B不认识用户<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_16.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>共享存储，而不是把数据放到单台服务器的内存中，用Redis实现分布式登录，springboot提供了现成的解决方案，引入坐标修改配置即可实现Redis存储session<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_17.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_18.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_19.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_20.png"
                      alt="在这里插入图片描述"
                ></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis分布式登录</tag>
      </tags>
  </entry>
  <entry>
    <title>Juc之Synchronized原理</title>
    <url>/2024/04/15/Juc%E4%B9%8BSynchronized%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="对象头的概念"><a href="#对象头的概念" class="headerlink" title="对象头的概念"></a>对象头的概念</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_21.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_22.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="如上图所示"><a href="#如上图所示" class="headerlink" title="如上图所示"></a>如上图所示</h2><p>每个JavaObject的字节码文件的头多少位称为Java的对象头，其中有32位</p>
<ul>
<li>MarkWord字段最后两位位当前Object的状态，一共有5种状态，分别为<strong>Normal(正常状态)</strong>,**Biased(偏向状态),Lightweight Locked(轻量级锁状态),Heeavyweight Locked(重量级锁),(Marked for Gc)(标记被Gc垃圾回收期回收的状态)**，</li>
<li>KlassWord是个指针指向该对象的类(type.class)对象，</li>
<li>hashcode为每个对象的hashcode，</li>
<li>age为每个对象的迭代年龄和jvm垃圾回收有关</li>
<li>ptr_to_heavyweight_monitor指向monitor对象的指针</li>
<li>ptr_to_lock_record 指向锁记录的指针</li>
</ul>
<h2 id="再来介绍操作系统Monitor-管程-监视器"><a href="#再来介绍操作系统Monitor-管程-监视器" class="headerlink" title="再来介绍操作系统Monitor(管程,监视器)"></a>再来介绍操作系统Monitor(管程,监视器)</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_23.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_24.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_25.png"
                      alt="在这里插入图片描述"
                ></p>
<ul>
<li>Owner（当前monitor的所有线程）</li>
<li>WaitSet (等待队列)</li>
<li>EntryList (阻塞队列)</li>
</ul>
<h1 id="Synchronized-锁优化"><a href="#Synchronized-锁优化" class="headerlink" title="Synchronized 锁优化"></a>Synchronized 锁优化</h1><h2 id="轻量级锁优化"><a href="#轻量级锁优化" class="headerlink" title="轻量级锁优化"></a>轻量级锁优化</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_26.png"
                      alt="在这里插入图片描述"
                ><br>加锁时优先加轻量级锁，当不满足需要时才升级为重量级锁<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_27.png"
                      alt="在这里插入图片描述"
                ><br>object第一行为markword字段，第二行为指向当前对象的类对象指针<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_28.png"
                      alt="在这里插入图片描述"
                ><br>此时会进行cas交换对象头的markword字段交换如果对象头种的状态为01（Normal）正常状态即可替换成功<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_29.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_30.png"
                      alt="在这里插入图片描述"
                ><br>如果当前锁记录已经为</p>
<ul>
<li>（00)轻量级锁状态，此时有其他的线程竞争获取当前锁会进入锁膨胀，</li>
<li>如果此时当前线程重复对当前对象加锁（称为锁重入）会在栈帧中创建一个新的锁记录，锁记录的第一行为null</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_31.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_32.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_33.png"
                      alt="在这里插入图片描述"
                ><br>将轻量级锁升级为重量级锁，当前对象以及被加了轻量级锁，此时再次被其他线程加轻量级锁，此时会升级为重量级锁。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_34.png"
                      alt="在这里插入图片描述"
                ><br>此时进入锁膨胀过程，此时线程1会给object对象申请Monitor锁，让Object的MarkWord字段指向Monitor并改变MorkWord的状态为重量级锁状态（10），把Monitor的Owner的值设置为指向线程0，此时线程1会进入EntryList进行等待。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_35.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h2><p>重量级锁竞争发生在已经申请了monitor对象后的线程竞争获得锁的状态（目的是为了避免线程的上下文切换）。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_36.png"
                      alt="在这里插入图片描述"
                ><br>当monitor对象的owner里面已经有线程了，此时第二个线程过来不会立刻进入阻塞队列而是会重试判断当前锁释放已经释放称为自旋优化。</p>
<h2 id="偏向锁优化"><a href="#偏向锁优化" class="headerlink" title="偏向锁优化"></a>偏向锁优化</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_37.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_38.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_39.png"
                      alt="在这里插入图片描述"
                ><br>区别于之前的替换对象头中的<strong>MarkWord的锁的状态</strong> 此时只有在第一次将当前线程id替换到MarkWord字段，之后当前线程再次对当前对象加锁会判断当前线程id是否是自己，如果是不做操作当前对象依然归当前线程所有（线程id替换到markword的thread字段）</p>
<h2 id="偏向状态"><a href="#偏向状态" class="headerlink" title="偏向状态"></a>偏向状态</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_40.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="偏向锁撤销"><a href="#偏向锁撤销" class="headerlink" title="偏向锁撤销"></a>偏向锁撤销</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_41.png"
                      alt="在这里插入图片描述"
                ><br>刚开始加轻量级锁monitor对象markword头被替换为01状态的头部里面没有hashcode，如果调用hashcode方法线程会将栈帧里面原来的所记录替换回来，此时有hashcode可以用，轻量级锁记录有哈是从的，和重量级锁会在monitor中记录hashcode。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_42.png"
                      alt="在这里插入图片描述"
                ><br>其他线程使用对该对象加锁，但是没有发生竞争，此时会撤销原来的偏向锁，升级为轻量级锁，第二个线程撤销锁的时候将轻量级锁撤销此时是无锁状态<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_43.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_44.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_45.png"
                      alt="在这里插入图片描述"
                ><br>刚开始30个对象偏向到线程1，之后这30个对象被线程2使用发生了偏向偏向锁撤销，会升级为轻量级锁，当同一线程的偏向对象被撤销的时候超过某一个阈值的时候会把剩下的对象全部偏向为线程2<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_46.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_47.png"
                      alt="在这里插入图片描述"
                ><br>对加锁的优化比如当前锁对象不会被共享，加了和没加一样此时会自动消除锁优化</p>
]]></content>
      <categories>
        <category>Juc</category>
      </categories>
      <tags>
        <tag>Juc之Synchronized原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Juc之ReentranLock原理</title>
    <url>/2024/04/16/Juc%E4%B9%8BReentranLock%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="ReentrantLock简介"><a href="#ReentrantLock简介" class="headerlink" title="ReentrantLock简介"></a>ReentrantLock简介</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_48.png"
                      alt="在这里插入图片描述"
                ></h2><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li><p>可重入（允许当前线程获得了该锁之后再次加锁）<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_49.png"
                      alt="在这里插入图片描述"
                ></p>
</li>
<li><p>可打断（当前线程如果有竞争就进入阻塞队列，可以被其他线程用interrupt方法打断等待状态此时会抛出异常）<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_50.png"
                      alt="在这里插入图片描述"
                ></p>
</li>
<li><p>锁超时（可以用tryLock方法加锁并且支持加等待时间超过等待时间没有得到锁返回false）<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_51.png"
                      alt="在这里插入图片描述"
                ></p>
</li>
<li><p>公平锁（可以在创建锁的时候设置true或false，公平锁为true默认为不公平锁，公平锁在阻塞队列中是按照进入的顺序获得锁而不是再次竞争）<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_52.png"
                      alt="在这里插入图片描述"
                ></p>
</li>
<li><p>条件变量ReentrantLock支持多条件变量<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_53.png"
                      alt="在这里插入图片描述"
                ></p>
</li>
</ul>
<h2 id="与synchronized对比"><a href="#与synchronized对比" class="headerlink" title="与synchronized对比"></a>与synchronized对比<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_54.png"
                      alt="在这里插入图片描述"
                ></h2><h1 id="ReentrantLock原理"><a href="#ReentrantLock原理" class="headerlink" title="ReentrantLock原理"></a>ReentrantLock原理</h1><h2 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_55.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_56.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_57.png"
                      alt="在这里插入图片描述"
                ><br>AQSjava中本质是一个抽象类。ReentrantLock用到了该类的对象<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_58.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_59.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_60.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="加锁成功流程"><a href="#加锁成功流程" class="headerlink" title="加锁成功流程"></a>加锁成功流程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_61.png"
                      alt="在这里插入图片描述"
                ><br>Sync继承AQS是一个抽象类有两个实现类一个是NonfairSync和FairSync公平锁和非公平锁， ReentrantLock继承了Lock接口Node是AQS中的节点。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_62.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_63.png"
                      alt="在这里插入图片描述"
                ><br>当没有竞争的时候加锁会执行以上方法秀爱state的值为1，并把当前线程设置到exclusiveOwnerThread.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_64.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_65.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_66.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_67.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_68.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_69.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_70.png"
                      alt="在这里插入图片描述"
                ><br>获得（第一次）锁失败后再次尝试（第二次）获得锁再次失败会构造当前线程对应节点，如果处于第二个节点即头节点之后会再次（第三次）尝试获得锁，失败后然后会把前驱节点的状态改为-1表示有责任唤醒后继节点最终进入阻塞（park）<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_71.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_72.png"
                      alt="在这里插入图片描述"
                ><br>释放锁的流程<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_73.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_74.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_75.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_76.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="可重入原理"><a href="#可重入原理" class="headerlink" title="可重入原理"></a>可重入原理</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_77.png"
                      alt="在这里插入图片描述"
                ><br>当前线程再次加锁会把state进行累加，释放的时候会把当前state进行减一</p>
<h2 id="不可打断原理"><a href="#不可打断原理" class="headerlink" title="不可打断原理"></a>不可打断原理</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_78.png"
                      alt="在这里插入图片描述"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_79.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_80.png"
                      alt="在这里插入图片描述"
                ><br>不可打断模式当Thread.interruped被设置为真时会进入if把interruped设置为true知道获得锁之后返回true当前线程会被终止</p>
<h2 id="可打断原理"><a href="#可打断原理" class="headerlink" title="可打断原理"></a>可打断原理</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_81.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_82.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_83.png"
                      alt="在这里插入图片描述"
                ></p>
<p>当Thread.interruped被设置为真时会进入if会直接抛出异常终止不会等到获得锁之后停止</p>
<h2 id="公平锁实现原理"><a href="#公平锁实现原理" class="headerlink" title="公平锁实现原理"></a>公平锁实现原理</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_84.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_85.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="条件变量实现原理"><a href="#条件变量实现原理" class="headerlink" title="条件变量实现原理"></a>条件变量实现原理</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_86.png"
                      alt="在这里插入图片描述"
                ><br>当前线程调用await会创建节点加到condition队列中并设置状态为-2<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_87.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_88.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_89.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_90.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_91.png"
                      alt="在这里插入图片描述"
                ></p>
]]></content>
      <categories>
        <category>Juc</category>
      </categories>
      <tags>
        <tag>Juc之ReentranLock原理</tag>
      </tags>
  </entry>
  <entry>
    <title>JMM之有序性,可见性,原子性,之volatile关键字</title>
    <url>/2024/04/17/JMM%E4%B9%8B%E6%9C%89%E5%BA%8F%E6%80%A7,%E5%8F%AF%E8%A7%81%E6%80%A7,%E5%8E%9F%E5%AD%90%E6%80%A7,%E4%B9%8Bvolatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_92.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_93.png"
                      alt="在这里插入图片描述"
                ><br>当前线程并不会停下来<br>分析<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_94.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_95.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_96.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_97.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_98.png"
                      alt="在这里插入图片描述"
                ><br><strong>synchroized关键字代码块</strong>里面的代码也能解决<strong>可见性</strong>问题<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_99.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_100.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_101.png"
                      alt="在这里插入图片描述"
                ></p>
<p>volatile关键字只能解决可见性的问题不能解决多线程并发的问题（原子性），synchroized可以解决<strong>可见性</strong>和<strong>原子性</strong></p>
<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_102.png"
                      alt="在这里插入图片描述"
                ><br>单线程情况下先执行i++或j++没有区别，但是多线程情况下会造成问题<br><strong>以下为CPU级别重排序优化</strong><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_103.png"
                      alt="在这里插入图片描述"
                ><br><strong>以下为java级别重排序优化</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_104.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_105.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_106.png"
                      alt="在这里插入图片描述"
                ><br><strong>此时加载ready变量上可以防止之前的代码被重排序</strong></p>
<h3 id="原理实现"><a href="#原理实现" class="headerlink" title="原理实现"></a>原理实现</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_107.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_109.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_110.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_110.png"
                      alt="在这里插入图片描述"
                ><br>以上代码多线程有问题，以下为解决但是也有问题<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_111.png"
                      alt="在这里插入图片描述"
                ><br>正常情况下是先执行构造方法（创建对象），再对引用赋值，经过指令重排可能出现相反的情况<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_112.png"
                      alt="在这里插入图片描述"
                ><br>问题可能是线程1进入到代码块，创建对象的时候一般流程是先开辟空间执行对象构造方法给引用赋值，但是如果反过来，先给引用赋值，再执行构造方法，此时其他线程可能，直接返回没有执行完构造方法的对象造成程序错乱。<br>问题解决<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_113.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_114.png"
                      alt="在这里插入图片描述"
                ><br>此时会对变量的写操作之前添加写屏障，防止，执行构造方法的指令跑到赋值操作之后解决了指令重排问题</p>
]]></content>
      <categories>
        <category>Juc</category>
      </categories>
      <tags>
        <tag>JMM</tag>
      </tags>
  </entry>
  <entry>
    <title>Juc之无锁并发</title>
    <url>/2024/04/18/Juc%E4%B9%8B%E6%97%A0%E9%94%81%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_115.png"
                      alt="在这里插入图片描述"
                ><br>cas基于的思想就是比较和设置<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_116.png"
                      alt="在这里插入图片描述"
                ><br>线程1获取余额的值为100，此时减少10为90，此时线程2修改为80，此时线程1去修改的时候会先用100，与最新的结果进行对比，100和80不相等此时修改失败，这样的拿到原值和最新的原值比较是否相等相等修改成功否则继续循环获取再次尝试修改。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_117.png"
                      alt="在这里插入图片描述"
                ><br>cas操作需要配合volatile来保证每次获得的数据为最新值而不是从cpu缓存拿到的值即可见性。</p>
<h2 id="CAS特点"><a href="#CAS特点" class="headerlink" title="CAS特点"></a>CAS特点<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_118.png"
                      alt="在这里插入图片描述"
                ></h2><h2 id="原子整数"><a href="#原子整数" class="headerlink" title="原子整数"></a>原子整数</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_119.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="CAS效率分析"><a href="#CAS效率分析" class="headerlink" title="CAS效率分析"></a>CAS效率分析</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_120.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_121.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_122.png"
                      alt="在这里插入图片描述"
                ></h2><p>用原子引用是为了保护不是基本类型的数据<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_123.png"
                      alt="在这里插入图片描述"
                ><br>ABA问题，主线程无法感知到对共享变量的修改比如刚开始为A，主线程要改成C，刚开始主线程获取A，但是在这之间可能有其他线程将A修改为M再由M修改为A，此时主线程对比值还是一样的还是能修改成功但是无法感知之间的变化<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_124.png"
                      alt="在这里插入图片描述"
                ><br>这个原子引用可以判断出来ABA问题，多了一个版本号<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_125.png"
                      alt="在这里插入图片描述"
                ><br>第二个版本号的简化版本，用布尔值记录是否改变布尔值自己初始化<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_126.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_127.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="原子数组"><a href="#原子数组" class="headerlink" title="原子数组"></a>原子数组</h2><p>实现了对数组的原子性操作<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_128.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_129.png"
                      alt="在这里插入图片描述"
                ><br>函数式接口<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_130.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_131.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_132.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="原子更新器"><a href="#原子更新器" class="headerlink" title="原子更新器"></a>原子更新器</h2><p>创建对象时参数为哪个类，成员变量的类型，成员变量方法名，实现对对象属性的cas操作。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_133.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_134.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="原子累加器"><a href="#原子累加器" class="headerlink" title="原子累加器"></a>原子累加器</h2><p>累加器内部可以有多个累加的数字多个线程同时累加多个数字最后求和<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_135.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_136.png"
                      alt="在这里插入图片描述"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_137.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="累加器原理"><a href="#累加器原理" class="headerlink" title="累加器原理"></a>累加器原理<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_138.png"
                      alt="在这里插入图片描述"
                ></h2>]]></content>
      <categories>
        <category>Juc</category>
      </categories>
      <tags>
        <tag>Juc之无锁并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql之锁机制</title>
    <url>/2024/04/20/Mysql%E4%B9%8B%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_139.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="加-解锁命令（加解锁是对整个数据库进行加锁）"><a href="#加-解锁命令（加解锁是对整个数据库进行加锁）" class="headerlink" title="加&#x2F;解锁命令（加解锁是对整个数据库进行加锁）"></a>加&#x2F;解锁命令（加解锁是对整个数据库进行加锁）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_140.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_141.png"
                      alt="在这里插入图片描述"
                ><br>MySQL实例则是MySQL服务器运行时的一个具体实例。在一台服务器上可以同时运行多个MySQL实例，每个实例有自己独立的配置、数据目录和端口号。每个MySQL实例可以独立地管理和存储数据库，拥有自己的进程和资源。</p>
<h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_142.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_143.png"
                      alt="在这里插入图片描述"
                ></p>
<h4 id="加表读锁的情况"><a href="#加表读锁的情况" class="headerlink" title="加表读锁的情况"></a>加表读锁的情况</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_144.png"
                      alt="在这里插入图片描述"
                ><br>客户端1加了表读锁，客户端1和其他客户端可以读，客户端1和其他客户端不可以写。</p>
<h4 id="加表写锁的情况"><a href="#加表写锁的情况" class="headerlink" title="加表写锁的情况"></a>加表写锁的情况</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_145.png"
                      alt="在这里插入图片描述"
                ><br>客户端1加了写锁客户端1可以写和读其他客户端都不可以读和写</p>
<h3 id="元数据锁"><a href="#元数据锁" class="headerlink" title="元数据锁"></a>元数据锁</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_146.png"
                      alt="在这里插入图片描述"
                ></p>
<p>共享读锁（SHARED_READ）和共享写(SHREAD_WRITE)锁都属于MDL读锁<br>排他锁（EXCLUSIVE）属于MDL写锁</p>
<p>解释<br>当其中一个事务执行查询操作时另一个事务可以执行增删该操作，反之亦然。<br>当其中一个事务执行增删改查任何一个操作时，另一个事务都无法执行修改（会进行阻塞）操作反之亦然。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_147.png"
                      alt="在这里插入图片描述"
                ><br>解释<br>如果事务1执行了查询当前表会加SHARED_READ锁，事务2执行增删改由于这两种锁之间是兼容的所以此时该表又加了SHREAD_WRITE锁。<br>如果事务1执行了查询当前表会加SHARED_READ锁，事务2执行了alter语句由于MDL读锁与MDL写锁互斥此时事务2无法加锁成功会进行阻塞状态，直到事务1提交。</p>
<h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_148.png"
                      alt="在这里插入图片描述"
                ><br>当事务1对某表进行按照id进行更新的时候会对当前行加行锁，此时如果事务2再对当前表加表锁会造成行锁表锁冲突为了防止冲突mysql加表锁的时候会一行一行的检查是否加了行锁，但是这样效率太低所以出现了意向锁mysql加表锁之前会判断当前表是否又意向锁以及意向锁的类型来判断是否加表锁。</p>
<p>有了意向锁后加行锁的时候会加意向锁来给表锁进行标记<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_149.png"
                      alt="在这里插入图片描述"
                ></p>
<p>意向锁的类型<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_150.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_151.png"
                      alt="在这里插入图片描述"
                ></p>
<p>当加意向共享锁的时候表锁可以加读锁不能加写锁（加写锁会阻塞直到读锁释放）<br>当加意向排他锁的时候此时表锁的读锁和写锁都不能加（都会阻塞直到事务1提交）<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_152.png"
                      alt="在这里插入图片描述"
                ></p>
<h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_153.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="行锁（锁定具体的某一行记录，防止其他事务进行update和delete）"><a href="#行锁（锁定具体的某一行记录，防止其他事务进行update和delete）" class="headerlink" title="行锁（锁定具体的某一行记录，防止其他事务进行update和delete）"></a>行锁（锁定具体的某一行记录，防止其他事务进行update和delete）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_154.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_155.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_156.png"
                      alt="在这里插入图片描述"
                ><br>事务1加s事务2也能加s事务2不能加x(会阻塞)<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_157.png"
                      alt="在这里插入图片描述"
                ><br>行锁升级<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_158.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="间隙锁（保证所有记录的间隙不变）"><a href="#间隙锁（保证所有记录的间隙不变）" class="headerlink" title="间隙锁（保证所有记录的间隙不变）"></a>间隙锁（保证所有记录的间隙不变）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_159.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_160.png"
                      alt="在这里插入图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_161.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="邻间锁"><a href="#邻间锁" class="headerlink" title="邻间锁"></a>邻间锁</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/img_162.png"
                      alt="在这里插入图片描述"
                ></p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
</search>
